[
    {
        "question": "Write a Python function to calculate the factorial of a number.",
        "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n# Example usage: factorial(5) will return 120."
    },
    {
        "question": "Write a Python function to check if a number is prime.",
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n# Example usage: is_prime(7) will return True."
    },
    {
        "question": "Write a Python program to calculate the area of a circle.",
        "answer": "import math\n\ndef circle_area(radius):\n    return math.pi * radius ** 2\n# Example usage: circle_area(5) will return 78.53981633974483."
    },
    {
        "question": "Write a Python function to implement quicksort algorithm.",
        "answer": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n# Example usage: quicksort([3, 6, 8, 10, 1, 2, 1]) will return [1, 1, 2, 3, 6, 8, 10]."
    },
    {
        "question": "Write a Python function to find the longest common subsequence of two strings.",
        "answer": "def lcs(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[m][n]\n# Example usage: lcs('AGGTAB', 'GXTXAYB') will return 4."
    },
    {
        "question": "Write a Python program to implement Dijkstra's algorithm to find the shortest path in a graph.",
        "answer": "import heapq\n\ndef dijkstra(graph, start):\n    heap = [(0, start)]\n    distances = {start: 0}\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        for neighbor, weight in graph[node].items():\n            distance = dist + weight\n            if neighbor not in distances or distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(heap, (distance, neighbor))\n    return distances\n# Example usage: dijkstra({'A': {'B': 1, 'C': 4}, 'B': {'C': 2}, 'C': {}}) will return {'A': 0, 'B': 1, 'C': 3}."
    },
    {
        "question": "Write a Python function to implement a binary search algorithm.",
        "answer": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n# Example usage: binary_search([1, 2, 3, 4, 5], 3) will return 2."
    },
    {
        "question": "Write a Python program to implement a simple neural network with backpropagation.",
        "answer": "import numpy as np\n\n# Sigmoid activation function\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\n# Derivative of sigmoid function\ndef sigmoid_derivative(x):\n    return x * (1 - x)\n\n# Initialize parameters\ninputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\noutputs = np.array([[0], [1], [1], [0]])\n\n# Random weights initialization\nnp.random.seed(1)\nW1 = np.random.rand(2, 4)\nW2 = np.random.rand(4, 1)\n\n# Training the neural network\nfor epoch in range(10000):\n    # Forward propagation\n    Z1 = np.dot(inputs, W1)\n    A1 = sigmoid(Z1)\n    Z2 = np.dot(A1, W2)\n    A2 = sigmoid(Z2)\n\n    # Backward propagation\n    dZ2 = A2 - outputs\n    dW2 = np.dot(A1.T, dZ2)\n    dZ1 = np.dot(dZ2, W2.T) * sigmoid_derivative(A1)\n    dW1 = np.dot(inputs.T, dZ1)\n\n    # Update weights\n    W1 -= 0.1 * dW1\n    W2 -= 0.1 * dW2\n\n# Example usage: A2 will be the network's output after training."
    },
    {
        "question": "Write a Python function to generate a Fibonacci sequence up to the nth element.",
        "answer": "def fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence[:n]\n# Example usage: fibonacci(10) will return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]."
    },
    {
        "question": "Write a Python program to reverse a string without using slicing.",
        "answer": "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n# Example usage: reverse_string('hello') will return 'olleh'."
    },
    {
        "question": "Write a Python program to calculate the sum of squares of numbers in a list.",
        "answer": "def sum_of_squares(nums):\n    return sum([num**2 for num in nums])\n# Example usage: sum_of_squares([1, 2, 3, 4]) will return 30."
    },
    {
        "question": "Write a Python function to merge two sorted lists into a single sorted list.",
        "answer": "def merge_sorted_lists(list1, list2):\n    sorted_list = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            sorted_list.append(list1[i])\n            i += 1\n        else:\n            sorted_list.append(list2[j])\n            j += 1\n    sorted_list.extend(list1[i:])\n    sorted_list.extend(list2[j:])\n    return sorted_list\n# Example usage: merge_sorted_lists([1, 3, 5], [2, 4, 6]) will return [1, 2, 3, 4, 5, 6]."
    },
    {
        "question": "Write a Python program to check if a given string is a palindrome.",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n# Example usage: is_palindrome('madam') will return True."
    }
    {
        "question": "Write a Python function to check if a string is an anagram of another string.",
        "answer": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)\n# Example usage: is_anagram('listen', 'silent') will return True."
    },
    {
        "question": "Write a Python function to remove duplicates from a list.",
        "answer": "def remove_duplicates(lst):\n    return list(set(lst))\n# Example usage: remove_duplicates([1, 2, 3, 3, 4]) will return [1, 2, 3, 4]."
    },
    {
        "question": "Write a Python function to find the maximum product of two integers in a list.",
        "answer": "def max_product(lst):\n    lst.sort()\n    return lst[-1] * lst[-2]\n# Example usage: max_product([1, 2, 3, 4]) will return 12."
    },
    {
        "question": "Write a Python program to count the number of occurrences of each element in a list.",
        "answer": "from collections import Counter\n\ndef count_occurrences(lst):\n    return dict(Counter(lst))\n# Example usage: count_occurrences([1, 2, 2, 3, 3, 3]) will return {1: 1, 2: 2, 3: 3}."
    },
    {
        "question": "Write a Python function to find the intersection of two lists.",
        "answer": "def intersection(lst1, lst2):\n    return list(set(lst1) & set(lst2))\n# Example usage: intersection([1, 2, 3], [2, 3, 4]) will return [2, 3]."
    },
    {
        "question": "Write a Python program to find the longest word in a sentence.",
        "answer": "def longest_word(sentence):\n    words = sentence.split()\n    return max(words, key=len)\n# Example usage: longest_word('I love programming in Python') will return 'programming'."
    },
    {
        "question": "Write a Python function to generate a random password of given length.",
        "answer": "import random\nimport string\n\ndef generate_password(length):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(characters) for _ in range(length))\n# Example usage: generate_password(10) will return a random 10-character password."
    },
    {
        "question": "Write a Python program to find the difference between two lists.",
        "answer": "def list_difference(lst1, lst2):\n    return list(set(lst1) - set(lst2))\n# Example usage: list_difference([1, 2, 3], [2, 3, 4]) will return [1]."
    },
    {
        "question": "Write a Python function to check if a string is a valid email address.",
        "answer": "import re\n\ndef is_valid_email(email):\n    pattern = r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+'\n    return bool(re.match(pattern, email))\n# Example usage: is_valid_email('test@example.com') will return True."
    },
    {
        "question": "Write a Python program to flatten a nested list.",
        "answer": "def flatten(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n# Example usage: flatten([1, [2, 3], [4, [5, 6]]]) will return [1, 2, 3, 4, 5, 6]."
    },
    {
        "question": "Write a Python function to calculate the sum of digits of a number.",
        "answer": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n# Example usage: sum_of_digits(123) will return 6."
    },
    {
        "question": "Write a Python program to find the least common multiple (LCM) of two numbers.",
        "answer": "import math\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n# Example usage: lcm(4, 5) will return 20."
    },
    {
        "question": "Write a Python function to reverse a number.",
        "answer": "def reverse_number(n):\n    return int(str(n)[::-1])\n# Example usage: reverse_number(12345) will return 54321."
    },
    {
        "question": "Write a Python program to count the frequency of characters in a string.",
        "answer": "from collections import Counter\n\ndef count_characters(s):\n    return dict(Counter(s))\n# Example usage: count_characters('aabbbcc') will return {'a': 2, 'b': 3, 'c': 2}."
    },
    {
        "question": "Write a Python function to find the square root of a number.",
        "answer": "import math\n\ndef square_root(n):\n    return math.sqrt(n)\n# Example usage: square_root(16) will return 4.0."
    },
    {
        "question": "Write a Python program to check if a string contains only digits.",
        "answer": "def is_digit(s):\n    return s.isdigit()\n# Example usage: is_digit('12345')
    },
    {
        "question": "Write a Python function to generate a Fibonacci sequence up to a given number.",
        "answer": "def fibonacci(n):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] <= n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n# Example usage: fibonacci(10) will return [0, 1, 1, 2, 3, 5, 8]."
    },
    {
        "question": "Write a Python program to find the first non-repeated character in a string.",
        "answer": "def first_non_repeated(s):\n    for char in s:\n        if s.count(char) == 1:\n            return char\n    return None\n# Example usage: first_non_repeated('swiss') will return 'w'."
    },
    {
        "question": "Write a Python function to calculate the factorial of a number using recursion.",
        "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n# Example usage: factorial(5) will return 120."
    },
    {
        "question": "Write a Python program to check if a string is a palindrome.",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n# Example usage: is_palindrome('racecar') will return True."
    },
    {
        "question": "Write a Python function to merge two sorted lists.",
        "answer": "def merge_lists(lst1, lst2):\n    return sorted(lst1 + lst2)\n# Example usage: merge_lists([1, 3, 5], [2, 4, 6]) will return [1, 2, 3, 4, 5, 6]."
    },
    {
        "question": "Write a Python function to find the common elements between two lists.",
        "answer": "def common_elements(lst1, lst2):\n    return list(set(lst1) & set(lst2))\n# Example usage: common_elements([1, 2, 3], [2, 3, 4]) will return [2, 3]."
    },
    {
        "question": "Write a Python program to remove all vowels from a string.",
        "answer": "def remove_vowels(s):\n    return ''.join([char for char in s if char not in 'aeiouAEIOU'])\n# Example usage: remove_vowels('hello world') will return 'hll wrld'."
    },
    {
        "question": "Write a Python function to find the intersection of three lists.",
        "answer": "def intersection_three(lst1, lst2, lst3):\n    return list(set(lst1) & set(lst2) & set(lst3))\n# Example usage: intersection_three([1, 2, 3], [2, 3, 4], [3, 4, 5]) will return [3]."
    },
    {
        "question": "Write a Python program to find the sum of all even numbers in a list.",
        "answer": "def sum_even(lst):\n    return sum([num for num in lst if num % 2 == 0])\n# Example usage: sum_even([1, 2, 3, 4, 5]) will return 6."
    },
    {
        "question": "Write a Python function to check if a number is prime.",
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n# Example usage: is_prime(7) will return True."
    },
    {
        "question": "Write a Python program to generate all permutations of a string.",
        "answer": "import itertools\n\ndef permutations(s):\n    return [''.join(p) for p in itertools.permutations(s)]\n# Example usage: permutations('abc') will return ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']."
    },
    {
        "question": "Write a Python function to find the nth Fibonacci number.",
        "answer": "def nth_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n# Example usage: nth_fibonacci(5) will return 5."
    },
    {
        "question": "Write a Python function to reverse a list.",
        "answer": "def reverse_list(lst):\n    return lst[::-1]\n# Example usage: reverse_list([1, 2, 3]) will return [3, 2, 1]."
    },
    {
        "question": "Write a Python program to check if two strings are anagrams.",
        "answer": "def are_anagrams(str1, str2):\n    return sorted(str1) == sorted(str2)\n# Example usage: are_anagrams('listen', 'silent') will return True."
    },
    {
        "question": "Write a Python function to check if a number is an Armstrong number.",
        "answer": "def is_armstrong(n):\n    num_str = str(n)\n    num_digits = len(num_str)\n    return n == sum(int(digit) ** num_digits for digit in num_str)\n# Example usage: is_armstrong(153) will return True."
    },
    {
        "question": "Write a Python program to find the factorial of a number using an iterative approach.",
        "answer": "def iterative_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n# Example usage: iterative_factorial(5) will return 120."
    },
    {
        "question": "Write a Python program to find the second largest number in a list.",
        "answer": "def second_largest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2] if len(unique_lst) > 1 else None\n# Example usage: second_largest([1, 2, 3, 4]) will return 3."
    },
    {
        "question": "Write a Python program to print 'Hello, World!'",
        "answer": "print('Hello, World!')\n# Example output: Hello, World!"
    },
    {
        "question": "Write a Python function to add two numbers.",
        "answer": "def add(x, y):\n    return x + y\n# Example usage: add(3, 4) will return 7."
    },
    {
        "question": "Write a Python program to find the type of a variable.",
        "answer": "x = 5\nprint(type(x))\n# Example output: <class 'int'>"
    },
    {
        "question": "Write a Python function to multiply a number by 10.",
        "answer": "def multiply_by_10(n):\n    return n * 10\n# Example usage: multiply_by_10(3) will return 30."
    },
    {
        "question": "Write a Python program to print the first 10 numbers of the Fibonacci sequence.",
        "answer": "a, b = 0, 1\nfor _ in range(10):\n    print(a, end=' ')\n    a, b = b, a + b\n# Example output: 0 1 1 2 3 5 8 13 21 34"
    },
    {
        "question": "Write a Python function to return the square of a number.",
        "answer": "def square(n):\n    return n * n\n# Example usage: square(4) will return 16."
    },
    {
        "question": "Write a Python program to check if a number is even or odd.",
        "answer": "def even_or_odd(n):\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n# Example usage: even_or_odd(7) will return 'Odd'."
    },
    {
        "question": "Write a Python program to swap two variables.",
        "answer": "a, b = 5, 10\n# Swap\na, b = b, a\n# After swap, a = 10, b = 5."
    },
    {
        "question": "Write a Python function to calculate the cube of a number.",
        "answer": "def cube(n):\n    return n ** 3\n# Example usage: cube(2) will return 8."
    },
    {
        "question": "Write a Python program to concatenate two strings.",
        "answer": "str1 = 'Hello'\nstr2 = 'World'\nprint(str1 + ' ' + str2)\n# Example output: Hello World"
    },
    {
        "question": "Write a Python function to find the length of a string.",
        "answer": "def string_length(s):\n    return len(s)\n# Example usage: string_length('hello') will return 5."
    },
    {
        "question": "Write a Python program to find the largest number in a list.",
        "answer": "numbers = [2, 3, 5, 1, 4]\nprint(max(numbers))\n# Example output: 5"
    },
    {
        "question": "Write a Python function to check if a string contains a specific character.",
        "answer": "def contains_char(s, char):\n    return char in s\n# Example usage: contains_char('hello', 'e') will return True."
    },
    {
        "question": "Write a Python program to reverse a string.",
        "answer": "s = 'python'\nprint(s[::-1])\n# Example output: nohtyp"
    },
    {
        "question": "Write a Python function to find the minimum of three numbers.",
        "answer": "def min_of_three(a, b, c):\n    return min(a, b, c)\n# Example usage: min_of_three(1, 2, 3) will return 1."
    },
    {
        "question": "Write a Python program to count the number of vowels in a string.",
        "answer": "def count_vowels(s):\n    return sum(1 for char in s if char in 'aeiouAEIOU')\n# Example usage: count_vowels('hello') will return 2."
    },
    {
        "question": "Write a Python function to check if a number is positive, negative, or zero.",
        "answer": "def check_number(n):\n    if n > 0:\n        return 'Positive'\n    elif n < 0:\n        return 'Negative'\n    else:\n        return 'Zero'\n# Example usage: check_number(-5) will return 'Negative'."
    },
    {
        "question": "Write a Python program to get the square root of a number.",
        "answer": "import math\nn = 16\nprint(math.sqrt(n))\n# Example output: 4.0"
    }
]
